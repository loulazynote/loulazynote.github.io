<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>C# - 標籤 - The Lazy Engineer Lou&#39;s Note</title>
        <link>https://loulazynote.github.io/tags/c#/</link>
        <description>C# - 標籤 - The Lazy Engineer Lou&#39;s Note</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-TW</language><managingEditor>louChang.tw@gmail.com (Lou Chang)</managingEditor>
            <webMaster>louChang.tw@gmail.com (Lou Chang)</webMaster><lastBuildDate>Tue, 28 Jun 2022 20:00:00 &#43;0800</lastBuildDate><atom:link href="https://loulazynote.github.io/tags/c#/" rel="self" type="application/rss+xml" /><item>
    <title>ValueInjecter@3.2.0 簡單用法</title>
    <link>https://loulazynote.github.io/posts/valueinjecter_meta/</link>
    <pubDate>Tue, 28 Jun 2022 20:00:00 &#43;0800</pubDate>
    <author>Lou Chang</author>
    <guid>https://loulazynote.github.io/posts/valueinjecter_meta/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://user-images.githubusercontent.com/33840759/176204169-641d7ace-e7b9-4ee8-83a4-1b7f0b3300cc.png" referrerpolicy="no-referrer">
            </div>基本用法 一般對應 var mapper = Mapper.Map&lt;TargetType&gt;(customer); var mapper = Mapper.Map&lt;FromType, TargetType&gt;(customer); 客製化對應 1 2 3 4 5 6 7 Mapper.AddMap&lt;FromType, TargetType&gt;(src =&gt; { var res = new TargetType(); res.InjectFrom(src); // 對應相同名字及型別的屬性 res.FullName = src.FirstName + &#34; &#34; + src.LastName; return res; }); InjectFrom 的用法 Inj]]></description>
</item>
<item>
    <title>OOP 物件導向學習筆記</title>
    <link>https://loulazynote.github.io/posts/ooplearning/</link>
    <pubDate>Fri, 10 Jun 2022 17:26:15 &#43;0800</pubDate>
    <author>Lou Chang</author>
    <guid>https://loulazynote.github.io/posts/ooplearning/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://user-images.githubusercontent.com/33840759/174276650-199850f5-64a2-455e-95fa-3eb26faa9acf.png" referrerpolicy="no-referrer">
            </div>物件導向四大原則 封裝(Encapsulation) 封裝（Encapsulation）在物件導向程式設計中是用來將資料與函式的實作內容包裝、隱]]></description>
</item>
</channel>
</rss>
