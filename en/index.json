[{"categories":["CSharp","ASP.NET Core","'C#'"],"content":"Installation Use NuGet to search for and install the Serilog.AspNetCore package Add configuration in Program.cs Log.Logger = new LoggerConfiguration() .MinimumLevel.Override(\"Microsoft\", LogEventLevel.Warning) .MinimumLevel.Override(\"System\", LogEventLevel.Warning)//Use MinimumLevel to set the LogLevel. If the source is from Microsoft or system messages, then the LogLevel is set to Warning .WriteTo.Console(new RenderedCompactJsonFormatter()) .WriteTo.File(new CompactJsonFormatter().ToString())//Output templates, output to Console and File .Enrich.FromLogContext() .CreateLogger(); CompactJsonFormatter will preserve message templates, properties, and formatting information so that rendered messages can be created later. When JSON is intended to be used in environments without message template rendering, RenderedCompactJsonFormatter can be used instead. loggerConfiguration.ReadFrom.Configuration(hostingContext.Configuration) : Loading currentConfiguration Add configuration in appsettings.json Microsoft.Hosting.Lifetime : Notifications for application lifecycle events Microsoft.EntityFrameworkCore.Database.Command : Logging of automatically generated SQL commands by EF Core Startup.cs setting app.UseSerilogRequestLogging(options =\u003e { // Customize the message template options.MessageTemplate = \"Handled {RequestPath}\"; // Emit debug-level events instead of the defaults options.GetLevel = (httpContext, elapsed, ex) =\u003e LogEventLevel.Debug; // Attach additional properties to the request completion event options.EnrichDiagnosticContext = (diagnosticContext, httpContext) =\u003e { diagnosticContext.Set(\"RequestHost\", httpContext.Request.Host.Value); diagnosticContext.Set(\"RequestScheme\", httpContext.Request.Scheme); }; }); ","date":"2022-06-28","objectID":"/en/serilogusage/:1:0","tags":["CSharp","ASP.NET Core","Tools","SeriLog","'C#'"],"title":"SeriLog setting's tips 2022","uri":"/en/serilogusage/"},{"categories":["CSharp","ASP.NET Core","'C#'"],"content":"Usage Add logging where needed First, use Microsoft.Extensions.Logging Add a constructor Add log entries where logging is needed Customize the log message level Since configurations are added in Program.cs and appsettings.json, all system operations and database reads will be logged. ","date":"2022-06-28","objectID":"/en/serilogusage/:2:0","tags":["CSharp","ASP.NET Core","Tools","SeriLog","'C#'"],"title":"SeriLog setting's tips 2022","uri":"/en/serilogusage/"},{"categories":["CSharp","ASP.NET Core","'C#'"],"content":"Reference materials Github - serilog-aspnetcore Github - Serilog.Formatting.Compact Microsoft - .NET Core 與 ASP.NET Core 中的記錄 WilL Blog - ASP.NET Core 如何紀錄 Entity Framework Core 5.0 自動產生的 SQL 命令 m@rcus 學習筆記 - [NETCore] 結構化日誌 Serilog - 配置設定 C# Corner - How To Implement Logging Using Serilog In ASP.NET Core 5.0 Application With Database ","date":"2022-06-28","objectID":"/en/serilogusage/:3:0","tags":["CSharp","ASP.NET Core","Tools","SeriLog","'C#'"],"title":"SeriLog setting's tips 2022","uri":"/en/serilogusage/"},{"categories":["Learning"],"content":" Files in the index: Tracked files Files not in the index: Untracked files The working tree is the working directory. As long as the content of the files in the index is consistent with the content of the files in the working directory, it is called a “Stage” state. As long as the content of the files in the index is inconsistent with the content of the files in the working directory, it is called an “Unstage” state. ","date":"2022-06-08","objectID":"/en/git_learning_note/:0:0","tags":["Git"],"title":"Git Learning Note","uri":"/en/git_learning_note/"},{"categories":["Learning"],"content":"Git Commands Command: git m = message init = initialize add = add to the GIT index rm = remove status = check current status ","date":"2022-06-08","objectID":"/en/git_learning_note/:1:0","tags":["Git"],"title":"Git Learning Note","uri":"/en/git_learning_note/"},{"categories":["Learning"],"content":"git diff Show differences HEAD = compare changes with the latest changes -cached = compare changes in the index with the latest changes in the local repository --binary = compare binary file differences --name-only = compare files in the working directory, list file names --name-status = list how many files have been changed between the working directory and the index git diff 'src-commit' 'tgt-commit' compare differences between commits git diff 'commit' compare differences with the target commit ","date":"2022-06-08","objectID":"/en/git_learning_note/:1:1","tags":["Git"],"title":"Git Learning Note","uri":"/en/git_learning_note/"},{"categories":["Learning"],"content":"git reset Reset the index -p = select which changes in the index to remove HEAD = reset the index and branch (add ~1 to revert to the previous version, and so on) --mixed = reset HEAD and index (default) --hard = reset HEAD, index, and working directory --hard ORIG_HEAD = revert to the previous version (always revert to the version before the reset) ","date":"2022-06-08","objectID":"/en/git_learning_note/:1:2","tags":["Git"],"title":"Git Learning Note","uri":"/en/git_learning_note/"},{"categories":["Learning"],"content":"git revert Revert to a previous version by making an opposite commit -h = help, list functions --abort = cancel --continue = continue --quit = stop ","date":"2022-06-08","objectID":"/en/git_learning_note/:1:3","tags":["Git"],"title":"Git Learning Note","uri":"/en/git_learning_note/"},{"categories":["Learning"],"content":"git clone Download a remote repository git clone --no-checkout 'URL' 'Filename' will use the filename and not checkout git clone --bare 'url' download the repository itself ","date":"2022-06-08","objectID":"/en/git_learning_note/:1:4","tags":["Git"],"title":"Git Learning Note","uri":"/en/git_learning_note/"},{"categories":["Learning"],"content":"git log View logs --oneline = short log version --oneline –graph = log version + graph, can add “-number” to show the number of entries git log --oneline --graph --all -10 get 10 entries of all history data ","date":"2022-06-08","objectID":"/en/git_learning_note/:1:5","tags":["Git"],"title":"Git Learning Note","uri":"/en/git_learning_note/"},{"categories":["Learning"],"content":"git reflog Record every version control record under the working directory ","date":"2022-06-08","objectID":"/en/git_learning_note/:1:6","tags":["Git"],"title":"Git Learning Note","uri":"/en/git_learning_note/"},{"categories":["Learning"],"content":"git checkout Check out/retrieve -- 'name' = copy the content of the name file from the index back to the working directory --orphan = create a new branch without parents checkout -b \"Filename\" can create a new branch and switch to it ","date":"2022-06-08","objectID":"/en/git_learning_note/:1:7","tags":["Git"],"title":"Git Learning Note","uri":"/en/git_learning_note/"},{"categories":["Learning"],"content":"git switch Switch branches ","date":"2022-06-08","objectID":"/en/git_learning_note/:1:8","tags":["Git"],"title":"Git Learning Note","uri":"/en/git_learning_note/"},{"categories":["Learning"],"content":"git clean Clean the working directory -f = force delete -d = delete the entire working directory -x = perform clean task, ignoring .gitignore settings -n = see which files will be cleaned ","date":"2022-06-08","objectID":"/en/git_learning_note/:1:9","tags":["Git"],"title":"Git Learning Note","uri":"/en/git_learning_note/"},{"categories":["Learning"],"content":"git stash Stash changes in the working directory save 'message' = stash pop = retrieve stash ","date":"2022-06-08","objectID":"/en/git_learning_note/:1:10","tags":["Git"],"title":"Git Learning Note","uri":"/en/git_learning_note/"},{"categories":["Learning"],"content":"git branch View/create branches -d = delete branch (can only delete merged branches) -D = force delete branch -r = list all remote tracking branches -a = list all remote + local branches git branch --merged list all merged branches git branch --no-merged list all unmerged branches git branch --merged | egrep -v \"(^\\*|master|develop)\" | xargs git branch -d delete all merged branches (not available in CMD/Powershell) ","date":"2022-06-08","objectID":"/en/git_learning_note/:1:11","tags":["Git"],"title":"Git Learning Note","uri":"/en/git_learning_note/"},{"categories":["Learning"],"content":"git merge Merge branches --ff = fast-forward merge (default) --no-ff = non-fast-forward merge --ff-only = fast-forward merge only --no-commit = merge without committing --abort = abort merge --squash = squash and merge (cannot be used with disabling fast-forward, and no merge graph will appear) git merge --no-ff --no-commit 'branchName' merge without committing ","date":"2022-06-08","objectID":"/en/git_learning_note/:1:12","tags":["Git"],"title":"Git Learning Note","uri":"/en/git_learning_note/"},{"categories":["Learning"],"content":"git rebase 'commit_id' Rebase -i --continue = continue --skip = skip --abort = cancel ","date":"2022-06-08","objectID":"/en/git_learning_note/:1:13","tags":["Git"],"title":"Git Learning Note","uri":"/en/git_learning_note/"},{"categories":["Learning"],"content":"git cherry-pick Forward pick and merge --continue = continue --quit = stop --abort = cancel ","date":"2022-06-08","objectID":"/en/git_learning_note/:1:14","tags":["Git"],"title":"Git Learning Note","uri":"/en/git_learning_note/"},{"categories":["Learning"],"content":"git push Push to remote --all = push all branches git push -u origin master link the local branch (master) with the remote branch (origin) git push origin --delete ‘branchName’ delete remote branch (must delete locally first) ","date":"2022-06-08","objectID":"/en/git_learning_note/:1:15","tags":["Git"],"title":"Git Learning Note","uri":"/en/git_learning_note/"},{"categories":["Learning"],"content":"git fetch Download changes from the remote repository --prune prune deleted remote branches ","date":"2022-06-08","objectID":"/en/git_learning_note/:1:16","tags":["Git"],"title":"Git Learning Note","uri":"/en/git_learning_note/"},{"categories":["Learning"],"content":"git pull Pull from the remote repository pull = git fetch + git merge git pull --rebase = git fetch + git rebase ","date":"2022-06-08","objectID":"/en/git_learning_note/:1:17","tags":["Git"],"title":"Git Learning Note","uri":"/en/git_learning_note/"},{"categories":["Learning"],"content":"git remote Remote -v = list URLs -h = remote help set-url = change URL git remote set-url origin 'new url' change the old URL to the new URL ","date":"2022-06-08","objectID":"/en/git_learning_note/:1:18","tags":["Git"],"title":"Git Learning Note","uri":"/en/git_learning_note/"},{"categories":["Learning"],"content":"git commit Create a version ","date":"2022-06-08","objectID":"/en/git_learning_note/:1:19","tags":["Git"],"title":"Git Learning Note","uri":"/en/git_learning_note/"},{"categories":["Learning"],"content":"git apply Apply a version (commit) --check = check files --reverse = revert (short -R) ","date":"2022-06-08","objectID":"/en/git_learning_note/:1:20","tags":["Git"],"title":"Git Learning Note","uri":"/en/git_learning_note/"},{"categories":["Learning"],"content":"git config GIT settings Add --global to set globally core.quotepath = set to false to display Chinese core.editor = view current editor git can only display ASCII characters set LC_ALL=C.UTF-8: To display Chinese in environments other than git bash Change environment variable (permanently save) \u003e setx LC_ALL C.UTF-8 MAC/Linux \u003e export LC_ALL=C.UTF-8 ","date":"2022-06-08","objectID":"/en/git_learning_note/:1:21","tags":["Git"],"title":"Git Learning Note","uri":"/en/git_learning_note/"},{"categories":["Learning"],"content":"Conflict Issues Display message: content = content conflict It is recommended to merge manually ","date":"2022-06-08","objectID":"/en/git_learning_note/:2:0","tags":["Git"],"title":"Git Learning Note","uri":"/en/git_learning_note/"},{"categories":["Learning"],"content":"Reference Materials 為自己學 GIT-另一種合併方式（使用 rebase） ","date":"2022-06-08","objectID":"/en/git_learning_note/:3:0","tags":["Git"],"title":"Git Learning Note","uri":"/en/git_learning_note/"}]