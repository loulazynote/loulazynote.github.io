{
  "title": "SeriLog setting's tips 2022",
  "date": "2022-06-28 20:22:05 +0800 +0800",
  "lastmod": "2022-06-28 20:22:05 +0800 +0800",
  "permalink": "https://loulazynote.github.io/en/serilogusage/",
  "content": "Installation Use NuGet to search for and install the Serilog.AspNetCore package Add configuration in Program.cs 1 2 3 4 5 6 7 Log.Logger = new LoggerConfiguration() .MinimumLevel.Override(\u0026#34;Microsoft\u0026#34;, LogEventLevel.Warning) .MinimumLevel.Override(\u0026#34;System\u0026#34;, LogEventLevel.Warning)//Use MinimumLevel to set the LogLevel. If the source is from Microsoft or system messages, then the LogLevel is set to Warning .WriteTo.Console(new RenderedCompactJsonFormatter()) .WriteTo.File(new CompactJsonFormatter().ToString())//Output templates, output to Console and File .Enrich.FromLogContext() .CreateLogger(); CompactJsonFormatter will preserve message templates, properties, and formatting information so that rendered messages can be created later. When JSON is intended to be used in environments without message template rendering, RenderedCompactJsonFormatter can be used instead.\nloggerConfiguration.ReadFrom.Configuration(hostingContext.Configuration) : Loading currentConfiguration\nAdd configuration in appsettings.json Microsoft.Hosting.Lifetime : Notifications for application lifecycle events Microsoft.EntityFrameworkCore.Database.Command : Logging of automatically generated SQL commands by EF Core Startup.cs setting 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 app.UseSerilogRequestLogging(options =\u0026gt; { // Customize the message template options.MessageTemplate = \u0026#34;Handled {RequestPath}\u0026#34;; // Emit debug-level events instead of the defaults options.GetLevel = (httpContext, elapsed, ex) =\u0026gt; LogEventLevel.Debug; // Attach additional properties to the request completion event options.EnrichDiagnosticContext = (diagnosticContext, httpContext) =\u0026gt; { diagnosticContext.Set(\u0026#34;RequestHost\u0026#34;, httpContext.Request.Host.Value); diagnosticContext.Set(\u0026#34;RequestScheme\u0026#34;, httpContext.Request.Scheme); }; }); Usage Add logging where needed\nFirst, use Microsoft.Extensions.Logging Add a constructor Add log entries where logging is needed Customize the log message level Since configurations are added in Program.cs and appsettings.json, all system operations and database reads will be logged. Reference materials Github - serilog-aspnetcore Github - Serilog.Formatting.Compact Microsoft - .NET Core 與 ASP.NET Core 中的記錄 WilL Blog - ASP.NET Core 如何紀錄 Entity Framework Core 5.0 自動產生的 SQL 命令 m@rcus 學習筆記 - [NETCore] 結構化日誌 Serilog - 配置設定 C# Corner - How To Implement Logging Using Serilog In ASP.NET Core 5.0 Application With Database "
}
